<templateSet group="JavaScript">
  <template name="app" value="var app = app || {};" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="if" value="if ($SELECTION$) {&#10;    $END$&#10;}" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="extend" value="(function () {&#10;&#9;'use strict';&#10;&#10;&#9;Function.prototype.extend = function (parent) {&#10;&#9;&#9;this.prototype = Object.create(parent.prototype);&#10;&#9;&#9;this.prototype.constructor = this;&#10;&#9;}&#10;}());" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iife" value="(function () {&#10;&#9;function $SELECTION$($SELECTION$) {&#10;&#9;&#9;$SELECTION$&#10;&#9;}&#10;&#10;}());" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="met" value="$SELECTION$.prototype.$SELECTION$ = function ($SELECTION$) {&#10;    $END$&#10;};" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="req" value="app.requester = (function () {&#10;    function Requester(appId, appSecret, baseUrl) {&#10;        this.appId = appId;&#10;        this.appSecret = appSecret;&#10;        this.baseUrl = baseUrl;&#10;    }&#10;&#10;    Requester.prototype.get = function (url, useSession) {&#10;        var headers = getHeaders.call(this, false, useSession);&#10;        return makeRequest('GET', url, headers, null);&#10;    };&#10;&#10;    Requester.prototype.post = function (url, data, useSession) {&#10;        var headers = getHeaders.call(this, data, useSession);&#10;        return makeRequest('POST', url, headers, data);&#10;    };&#10;&#10;    Requester.prototype.put = function (url, data, useSession) {&#10;        var headers = getHeaders.call(this, data, useSession);&#10;        return makeRequest('PUT', url, headers, data);&#10;    };&#10;&#10;    Requester.prototype.delete = function (url, useSession) {&#10;        var headers = getHeaders.call(this, false, useSession);&#10;        return makeRequest('DELETE', url, headers, null);&#10;    };&#10;&#10;    function makeRequest(method, url, headers, data) {&#10;        var defer = Q.defer();&#10;&#10;        $.ajax({&#10;            method: method,&#10;            url: url,&#10;            headers: headers,&#10;            data: JSON.stringify(data) || null,&#10;            success: function (data) {&#10;                defer.resolve(data);&#10;            },&#10;            error: function (error) {&#10;                defer.reject(error);&#10;            }&#10;        });&#10;&#10;        return defer.promise;&#10;    }&#10;&#10;    function getHeaders(isJSON, useSession) {&#10;        var headers = {},&#10;            token;&#10;&#10;        if (isJSON) {&#10;            headers['Content-Type'] = 'application/json';&#10;        }&#10;&#10;        if (useSession) {&#10;            token = sessionStorage['sessionId'];&#10;            headers['Authorization'] = 'Kinvey ' + token;&#10;        } else {&#10;            token = this.appId + ':' + this.appSecret;&#10;            headers['Authorization'] = 'Basic ' + btoa(token);&#10;        }&#10;&#10;        return headers;&#10;    }&#10;&#10;    return {&#10;        load: function (appId, appSecret, baseUrl) {&#10;            return new Requester(appId, appSecret, baseUrl);&#10;        }&#10;    }&#10;}());" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="userController" value="app.userController = (function() {&#10;    function UserController(viewBag, model) {&#10;        this.model = model;&#10;        this.viewBag = viewBag;&#10;    }&#10;&#10;    UserController.prototype.loadLoginPage = function(selector) {&#10;        this.viewBag.showLoginPage(selector);&#10;    };&#10;&#10;    UserController.prototype.login = function(data) {&#10;        return this.model.login(data)&#10;            .then(function(success) {&#10;                sessionStorage['sessionId'] = success._kmd.authtoken;&#10;                sessionStorage['username'] = success.username;&#10;                sessionStorage['fullName'] = success.fullName;&#10;                sessionStorage['userId'] = success._id;&#10;&#10;                Sammy(function() {&#10;                    this.trigger('redirectUrl', {url: '#/home/'});&#10;                });&#10;&#10;            }).done();&#10;    };&#10;&#10;&#10;    UserController.prototype.loadRegisterPage = function(selector) {&#10;        this.viewBag.showRegisterPage(selector);&#10;    };&#10;&#10;    UserController.prototype.register = function(data) {&#10;        return this.model.register(data)&#10;            .then(function(success) {&#10;                sessionStorage['sessionId'] = success._kmd.authtoken;&#10;                sessionStorage['username'] = success.username;&#10;                sessionStorage['fullName'] = success.fullName;&#10;                sessionStorage['userId'] = success._id;&#10;&#10;                Sammy(function() {&#10;                    this.trigger('redirectUrl', {url: '#/home/'});&#10;                });&#10;            }).done();&#10;    };&#10;&#10;    UserController.prototype.logout = function() {&#10;        this.model.logout()&#10;            .then(function() {&#10;                sessionStorage.clear();&#10;&#10;                Sammy(function() {&#10;                    this.trigger('redirectUrl', {url: '#/'});&#10;                });&#10;            })&#10;    };&#10;&#10;    return {&#10;        load: function(viewBag, model) {&#10;            return new UserController(viewBag, model);&#10;        }&#10;    }&#10;}());" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="userModel" value="app.userModel = (function() {&#10;    function UserModel(requester) {&#10;        this.requester = requester;&#10;        this.serviceUrl = requester.baseUrl + 'user/' + requester.appId + '/';&#10;    }&#10;&#10;    UserModel.prototype.login = function(data) {&#10;        var requestUrl = this.serviceUrl + 'login';&#10;        return this.requester.post(requestUrl, data, false);&#10;    };&#10;&#10;    UserModel.prototype.register = function(data) {&#10;        return this.requester.post(this.serviceUrl, data, false);&#10;    };&#10;&#10;    UserModel.prototype.logout = function() {&#10;        var requestUrl = this.serviceUrl + '_logout';&#10;        return this.requester.post(requestUrl, null, true);&#10;    };&#10;&#10;&#10;    return {&#10;        load: function(requester) {&#10;            return new UserModel(requester);&#10;        }&#10;    }&#10;}());" toReformat="false" toShortenFQNames="true">
    <context />
  </template>
  <template name="userViewBag" value="app.userViewBag = (function () {&#10;    function showLoginPage(selector) {&#10;        $.get('templates/login.html', function (templ) {&#10;            $(selector).html(templ);&#10;            $('#loginButton').on('click', function () {&#10;                var username = $('#username').val(),&#10;                    password = $('#password').val();&#10;&#10;                Sammy(function() {&#10;                    this.trigger('login', {username: username, password: password});&#10;                })&#10;            })&#10;        })&#10;    }&#10;&#10;    function showRegisterPage(selector) {&#10;        $.get('templates/register.html', function (templ) {&#10;            $(selector).html(templ);&#10;            $('#registerButton').on('click', function () {&#10;                var username = $('#username').val(),&#10;                    password = $('#password').val(),&#10;                    fullName = $('#fullName').val();&#10;&#10;                Sammy(function() {&#10;                    this.trigger('register', {username: username, password: password, fullName: fullName});&#10;                })&#10;            })&#10;        })&#10;    }&#10;&#10;    return {&#10;        load: function () {&#10;            return {&#10;                showLoginPage: showLoginPage,&#10;                showRegisterPage: showRegisterPage&#10;            }&#10;        }&#10;    }&#10;}());" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="homeViewBag" value="app.homeViewBag = (function () {&#10;    function showWelcomePage(selector) {&#10;        $.get('templates/welcome.html', function(templ) {&#10;            $(selector).html(templ);&#10;        })&#10;    }&#10;&#10;    function showHomePage(selector, data) {&#10;        $.get('templates/home.html', function(templ) {&#10;            var renderedData = Mustache.render(templ, data);&#10;            $(selector).html(renderedData);&#10;        })&#10;    }&#10;&#10;    return {&#10;        load: function () {&#10;            return {&#10;                showWelcomePage: showWelcomePage,&#10;                showHomePage: showHomePage&#10;            }&#10;        }&#10;    }&#10;}());" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="homeController" value="app.homeController = (function() {&#10;    function HomeController(viewBag, model) {&#10;        this.model = model;&#10;        this.viewBag = viewBag;&#10;    }&#10;&#10;    HomeController.prototype.loadWelcomePage = function(selector) {&#10;        this.viewBag.showWelcomePage(selector);&#10;    };&#10;&#10;    HomeController.prototype.loadHomePage = function(selector) {&#10;        var data = {&#10;            fullName: sessionStorage['fullName'],&#10;            username: sessionStorage['username']&#10;        };&#10;&#10;        this.viewBag.showHomePage(selector, data);&#10;    };&#10;&#10;    return {&#10;        load: function(viewBag, model) {&#10;            return new HomeController(viewBag, model);&#10;        }&#10;    }&#10;}());" toReformat="false" toShortenFQNames="true">
    <context />
  </template>
  <template name="app.js" value="(function () {&#10;    var router = Sammy(function () {&#10;        var selector = '#container';&#10;        var requester = app.requester.load('kid_-1OOSGQc1b', '2395126a366c476297e7188f0017cbcd', 'https://baas.kinvey.com/');&#10;&#10;        var userViewBag = app.userViewBag.load();&#10;        var homeViewBag = app.homeViewBag.load();&#10;        var notesViewBag = app.notesViewBag.load();&#10;&#10;        var userModel = app.userModel.load(requester);&#10;        var notesModel = app.notesModel.load(requester);&#10;&#10;        var userController = app.userController.load(userViewBag, userModel);&#10;        var homeController = app.homeController.load(homeViewBag);&#10;        var notesController = app.notesController.load(notesViewBag, notesModel);&#10;&#10;        this.before({except:{path:'#\/(login\/|register\/)?'}}, function() {&#10;            if(!sessionStorage['sessionId']) {&#10;                this.redirect('#/');&#10;                return false;&#10;            }&#10;        });&#10;&#10;        this.before(function() {&#10;            if(!sessionStorage['sessionId']) {&#10;                $('#menu').hide();&#10;            } else {&#10;                $('#welcomeMenu').text('Welcome, ' + sessionStorage['fullName']);&#10;                $('#menu').show();&#10;            }&#10;        });&#10;&#10;        this.get('#/', function() {&#10;            homeController.loadWelcomePage(selector);&#10;        });&#10;&#10;        this.get('#/home/', function() {&#10;            homeController.loadHomePage(selector);&#10;        });&#10;&#10;        this.get('#/login/', function() {&#10;            userController.loadLoginPage(selector);&#10;        });&#10;&#10;        this.get('#/register/', function() {&#10;            userController.loadRegisterPage(selector);&#10;        });&#10;&#10;        this.get('#/logout/', function() {&#10;            userController.logout();&#10;        });&#10;&#10;        this.bind('redirectUrl', function(ev, data) {&#10;            this.redirect(data.url);&#10;        });&#10;&#10;        this.bind('login', function(ev, data) {&#10;            userController.login(data);&#10;        });&#10;&#10;        this.bind('register', function(ev, data) {&#10;            userController.register(data);&#10;        });&#10;&#10;        this.bind('addNote', function(ev, data) {&#10;            notesController.addNote(data);&#10;        });&#10;       &#10;&#10;        this.bind('showDeleteNote', function(ev, data) {&#10;            notesController.loadDeleteNote(selector, data);&#10;        });&#10;    });&#10;&#10;    router.run('#/');&#10;}());&#10;" toReformat="false" toShortenFQNames="true">
    <context />
  </template>
</templateSet>